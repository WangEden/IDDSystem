#设置cmake版本号(视自己cmake版本为定)
cmake_minimum_required(VERSION 3.20.0) 
#设置工程名称
project(visual_window)


#add_definitions(-std=c++11)
add_definitions(-DAPI_EXPORTS)
set(CMAKE_AUTORCC ON)
#打开全局moc,设置自动生成moc文件，一定要设置
set(CMAKE_AUTOMOC ON)
#打开全局uic，非必须
set(CMAKE_AUTOUIC ON)
# set(OrbbecSDK_DIR  "/home/hy/visual_window_First_PCL_singlePipe_Real/Package/SDK")
set(CMAKE_CUDA_COMPILER /usr/local/cuda/bin/nvcc)
enable_language(CUDA)
add_executable(test test.cpp)

include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_SOURCE_DIR}/plugin)

include_directories(/usr/local/cuda/targets/aarch64-linux/include)
link_directories(/usr/local/cuda/targets/aarch64-linux/lib)
add_library(myplugins SHARED ${PROJECT_SOURCE_DIR}/plugin/yololayer.cu)
target_link_libraries(myplugins nvinfer cudart)
#查找需要的Qt库文件，最好每一个库都要写，Qt也会根据依赖关系自动添加
find_package(Qt5Widgets) 
find_package(Qt5Core)
find_package(Qt5Gui)
find_package(Qt5 COMPONENTS Network REQUIRED)
# find_package(OrbbecSDK REQUIRED)
find_package(OpenCV)
# find_package(PCL REQUIRED)
find_package(Eigen3 REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})

# Orb
# include_directories(${OrbbecSDK_INCLUDE_DIR})
# link_directories(${OrbbecSDK_LIBRARY_DIRS})

# PCL
# include_directories(${PCL_INCLUDE_DIRS})
# link_directories(${PCL_LIBRARY_DIRS})

include_directories(${EIGEN3_INCLUDE_DIR})

#查找当前文件夹中的所有源代码文件，也可以通过Set命令将所有文件设置为一个变量
file(GLOB_RECURSE SRC_FILES ${PROJECT_SOURCE_DIR}/src/*.cpp ${PROJECT_SOURCE_DIR}/src/*.cu ${PROJECT_SOURCE_DIR}/plugin/*.cu)
file(GLOB SRC "./*.cpp")
#查找设置当前文件夹中所有的头文件
FILE(GLOB HEAD_FILES "./*.h" "./include/*.h")
#查找设置当前文件夹中所有的ui文件
FILE(GLOB UI_FILES "./*.ui")

#通过Ui文件生成对应的头文件，一定要添加
qt5_wrap_ui(WRAP_FILES ${UI_FILES})

#添加资源文件，非必须，一旦采用，注意修改相应的qrc文件名
set(RCC_FILES rew.qrc)

#将ui文件和生成文件整理在一个文件夹中，非必须
source_group("Ui" FILES ${UI_FILES} ${WRAP_FILES} )

#创建工程文件
add_executable(${PROJECT_NAME} ${SRC} ${SRC_FILES} ${HEAD_FILES} ${RCC_FILES} ${WRAP_FILES})

#添加Qt5依赖项
target_link_libraries(${PROJECT_NAME} 
    Qt5::Widgets 
    Qt5::Core 
    Qt5::Gui 
    Qt5::Network 
    # OrbbecSDK::OrbbecSDK 
    X11 
    nvinfer 
    cudart 
    myplugins 
    ${EIGEN3_LIBRARIES}
    ${OpenCV_LIBS}
    # ${PCL_LIBRARIES}
)
# add_definitions(${PCL_DEFINITIONS})

target_link_libraries(test
    ${OpenCV_LIBS}
)
